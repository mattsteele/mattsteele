---
import Icon from "./Icon.astro";
---

<theme-toggle>
	<button>
		<span class="sr-only">Dark theme</span>
		<span class="invisible dark:visible"><Icon icon="sun" /></span>
		<span class="dark:invisible"><Icon icon="moon-stars" /></span>
	</button>
</theme-toggle>

<style>
	button {
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0;
		background-color: var(--gray-999);
		box-shadow: inset 0 0 0 1px var(--accent-overlay);
		cursor: pointer;
	}

	.icon {
		z-index: 1;
		position: relative;
		display: flex;
		padding: 0.5rem;
		width: 4rem;
		height: 4rem;
		font-size: 4rem;
		color: var(--accent-overlay);
	}

	.icon.light::before {
		content: "";
		z-index: -1;
		position: absolute;
		inset: 0;
		background-color: var(--accent-regular);
		border-radius: 999rem;
	}

	:global(.theme-dark) .icon.light::before {
		transform: translateX(100%);
	}

	:global(.theme-dark) .icon.dark,
	:global(html:not(.theme-dark)) .icon.light,
	button[aria-pressed="false"] .icon.light {
		color: var(--accent-text-over);
	}

	@media (prefers-reduced-motion: no-preference) {
		.icon,
		.icon.light::before {
			transition:
				transform var(--theme-transition),
				color var(--theme-transition);
		}
	}

	@media (forced-colors: active) {
		.icon.light::before {
			background-color: SelectedItem;
		}
	}
</style>

<script>
	class ThemeToggle extends HTMLElement {
		constructor() {
			super();
			if (typeof window === "undefined") return;
			const button = this.querySelector("button");
			const setTheme = (dark) => {
				document.documentElement.classList[dark ? "add" : "remove"]("dark");
				localStorage.setItem("theme", dark ? "dark" : "light");
			};
			button.addEventListener("click", () => setTheme(!this.isDark()));
			setTheme(this.isDark());
		}
		isDark() {
			return document.documentElement.classList.contains("dark");
		}
	}
	customElements.define("theme-toggle", ThemeToggle);
</script>
