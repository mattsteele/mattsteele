---
// import Icon from "./Icon.astro";
import ThemeToggle from "./ThemeToggle.astro";
// import type { iconPaths } from "./IconPaths";
import TerminalWindow from "../assets/svgs/terminal-window.svg";

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
	{ label: "About", href: "/about/" },
	{ label: "Resume", href: "/resume/" },
	{ label: "Work", href: "/work/" },
];

/** Test if a link is pointing to the current page. */
const isCurrentPage = (href: string) => {
	let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, "");
	if (pathname.at(0) !== "/") pathname = "/" + pathname;
	if (pathname.at(-1) !== "/") pathname += "/";
	return pathname === href || (href !== "/" && pathname.startsWith(href));
};
---

<nav class="flex justify-between p-2 border-b-1 border-gray-300">
	<div class="self-start">
		<a href="/" aria-label="Link to home page">
			<span class="sr-only">Matt Steele</span>
			<TerminalWindow
				class="text-gray-800 hover:text-gray-400 dark:text-white"
				width="36px"
				height="36px"
			/>
		</a>
	</div>

	<!-- This is also the mobile menu -->
	<div id="menu-content" class="w-sm self-end flex">
		<div class="grow-2 flex items-center space-between">
			<ul class="w-full flex justify-between">
				{
					textLinks.map(({ label, href }) => (
						<li>
							<a
								aria-current={isCurrentPage(href) ? "page" : null}
								class="link"
								href={href}
							>
								{label}
							</a>
						</li>
					))
				}
			</ul>
		</div>

		<!-- This is desktop -->
		<div class="ml-8 pr-8 pl-8 self-end border-l-1 border-gray-300">
			<ThemeToggle />
		</div>
	</div>
</nav>

<script>
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector("template")!.content.cloneNode(true));
			const btn = this.querySelector("button")!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById("menu-content")!;
			menu.hidden = true;
			// Add "menu-content" class in JS to avoid covering content in non-JS browsers.
			menu.classList.add("menu-content");

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute("aria-expanded", expand ? "true" : "false");
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener("click", () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia("(min-width: 50em)");
			handleViewports(mediaQueries);
			mediaQueries.addEventListener("change", handleViewports);
		}
	}
	customElements.define("menu-button", MenuButton);
</script>
